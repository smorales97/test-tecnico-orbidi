name: CICD

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials oidc
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{ secrets.ROLE_AWS_GITHUB }}
            aws-region: ${{ secrets.AWS_REGION }}

      #- name: Set up AWS CLI
       # uses: aws-actions/configure-aws-credentials@v1
        #with:
         # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #aws-region: ${{ secrets.AWS_REGION }}

      - name: View Replace
        run: cat ./terraform/main.tf
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Checkear si S3 bucket existe
        id: check_s3
        run: |
          BUCKET_NAME="tf-s3-state-orbidi-smorales"
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket does not exist."
            cd ./tf-s3-state
            terraform init
            terraform plan
            terraform apply --auto-approve
          else
            echo "Bucket exists."
          fi

      - name: Initial IaC
        run: |
          cd ./terraform
          terraform init
      - name: Run plan terraform
        run: |
          cd ./terraform
          terraform plan -out=plan.out -var-file variables.tfvars
      - name: Apply terrafom
        run: |
          cd ./terraform
          terraform apply plan.out
      
      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        
      - name: Check repository App1
        run: |
            repo_exists=$(aws ecr describe-repositories --repository-names "simple_app1" --region "us-east-1" || true)

            if ! echo "${repo_exists}" | grep -q "simple_app1"; then
            # Si el repositorio no existe falla
            exit 1
            fi
            echo "El repositorio existe."

      - name: Check repository App2
        run: |
            repo_exists=$(aws ecr describe-repositories --repository-names "simple_app2" --region "us-east-1" || true)

            if ! echo "${repo_exists}" | grep -q "simple_app2"; then
            # Si el repositorio no existe falla
            exit 1
            fi
            echo "El repositorio existe."

      - name: Build App1
        run: |
          # Set up variables
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY=simple_app1
          IMAGE_TAG=${GITHUB_SHA::7}

          # Build the Docker image
          docker build -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:$IMAGE_TAG ./apps/simple-app1

          # Tag and push the image to ECR
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build App2
        run: |
          # Set up variables
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY=simple_app2
          IMAGE_TAG=${GITHUB_SHA::7}

          # Build the Docker image
          docker build -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:$IMAGE_TAG ./apps/simple-app2

          # Tag and push the image to ECR
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG