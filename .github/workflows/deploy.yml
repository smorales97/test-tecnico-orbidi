name: CICD

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      - name: Check and Create ECR Repository if not exist
        run: |
            repo_exists=$(aws ecr describe-repositories --repository-names "orbidi-apps" --region "us-east-1" || true)

            if ! echo "${repo_exists}" | grep -q "orbidi-apps"; then
            # Si el repositorio no existe, cr√©alo
            aws ecr create-repository --repository-name "orbidi-apps" --region "us-east-1"
            fi

            echo "El repositorio existe y/o ha sido creado exitosamente."

      - name: Build App1
        run: |
          # Set up variables
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY=orbidi-apps
          IMAGE_TAG=${GITHUB_SHA::7}

          # Build the Docker image
          docker build -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:$IMAGE_TAG ./apps/simple-app1

          # Tag and push the image to ECR
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build App2
        run: |
          # Set up variables
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY=orbidi-apps
          IMAGE_TAG=${GITHUB_SHA::7}

          # Build the Docker image
          docker build -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:$IMAGE_TAG ./apps/simple-app2

          # Tag and push the image to ECR
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: View Replace
        run: cat ./iac/main.tf
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Initial Terrafom
        run: |
          cd ./terraform
          terraform init
      - name: Run plan terraform
        run: |
          cd ./terraform
          terraform plan
      - name: Apply terrafom
        run: |
          cd ./terraform
          terraform apply -destroy







      #- name: Install Terraform
       # uses: hashicorp/setup-terraform@v1

      #- name: Terraform Init
       # run: |
        #  terraform init \
         #   -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          #  -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}" \
           # -backend-config="region=${{ secrets.AWS_REGION }}"

      #- name: Terraform plan
       # run: terraform plan -out=tfplan
    
      #- name: Terraform Apply
        #if: success()
        #env:
        #      TF_VAR_app1_image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/simple-app1:${GITHUB_SHA::7}
        #      TF_VAR_app2_image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/simple-app2:${GITHUB_SHA::7}
        #run: terraform apply -auto-approve tfplan