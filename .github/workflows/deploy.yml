name: CICD

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
        # Terraform variables
        TF_VAR_IMAGE_TAG: ${{ github.sha }}
        TF_VAR_AWS_REGION: ${{ secrets.AWS_REGION }}
        TF_VAR_AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        TF_VAR_SIMPLE_APP2: ${{ vars.SIMPLE_APP2 }}
        TF_VAR_SIMPLE_APP1: ${{ vars.SIMPLE_APP1 }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials oidc
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{ secrets.ROLE_AWS_GITHUB }}
            aws-region: ${{ secrets.AWS_REGION }}
   
      - name: Checkear si S3 bucket existe
        id: check_s3
        run: |
          BUCKET_NAME="tf-s3-state-orbidi-samorales"
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket does not exist."
            cd ./tf-s3-state
            terraform init
            terraform plan
            terraform apply --auto-approve
          else
            echo "Bucket exists."
          fi
    
          - name: Log in to Amazon ECR
          id: login-ecr
          run: |
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
      - name: Check repository ${{ vars.SIMPLE_APP1 }}
        run: |
            repo_exists=$(aws ecr describe-repositories --repository-names ${{ vars.SIMPLE_APP1 }} --region ${{ secrets.AWS_REGION  }} || true)

            if ! echo "${repo_exists}" | grep -q ${{ vars.SIMPLE_APP1 }}; then
              aws ecr create-repository --repository-name ${{ vars.SIMPLE_APP1 }} --region ${{ secrets.AWS_REGION  }}
            fi
            echo "El repositorio existe."

      - name: Check repository ${{ vars.SIMPLE_APP2 }}
        run: |
            repo_exists=$(aws ecr describe-repositories --repository-names ${{ vars.SIMPLE_APP2 }} --region ${{ secrets.AWS_REGION  }} || true)

            if ! echo "${repo_exists}" | grep -q ${{ vars.SIMPLE_APP2 }}; then
              aws ecr create-repository --repository-name ${{ vars.SIMPLE_APP2 }} --region ${{ secrets.AWS_REGION  }}
            fi
            echo "El repositorio existe."

      - name: Build App1
        run: |
            # Set up variables
            ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            ECR_REPOSITORY=${{ vars.SIMPLE_APP1 }}
            IMAGE_TAG=${{ github.sha }}
  
            # Build the Docker image
            docker build -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:$IMAGE_TAG ./apps/simple-app1
  
            # Tag and push the image to ECR
            docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
      - name: Build App2
        run: |
          # Set up variables
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY=${{ vars.SIMPLE_APP2 }}
          IMAGE_TAG=${{ github.sha }}

          # Build the Docker image
          docker build -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:$IMAGE_TAG ./apps/simple-app2

          # Tag and push the image to ECR
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          - name: Install Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.9.0
    
      - name: Initial IaC
        run: |
          cd ./terraform
          terraform init

      - name: Run plan terraform
        run: |
          cd ./terraform
          terraform plan -out=plan.out

      - name: Apply terrafom
        run: |
          cd ./terraform
          terraform apply plan.out

      - name: destroy terraform
        run: |
          cd ./terraform
          terraform destroy -auto-approve